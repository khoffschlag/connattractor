{"kind":"Notebook","sha256":"18e8735de68d6c5e261c08b76faeb7fb8bf4f754bab141b10bd61d84837fede8","slug":"package","location":"/home/runner/work/connattractor/connattractor/docs/04-package.ipynb","dependencies":[],"frontmatter":{"title":"Python package","license":{"content":{"id":"CC-BY-4.0","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true,"url":"https://creativecommons.org/licenses/by/4.0/"}},"github":"https://github.com/pni-lab/connattractor","keywords":[],"exports":[{"format":"ipynb","filename":"04-package.ipynb","url":"/04-package-3a5901f087d540c34118593aac1e5d44.ipynb"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"inlineCode","value":"connattractor","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"jGGS59Cazq"}],"identifier":"connattractor","label":"connattractor","html_id":"connattractor","implicit":true,"key":"yKZoOVt6OZ"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"for Connectivity-based Hopfield Neural Networks (CHNNs)","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"r3RNtCWFoF"}],"key":"jp1CsQlurW"}],"key":"Qw12NYLhai"}],"key":"pGgYxPa9Or"},{"type":"heading","depth":2,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Installation","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"SNoBucUaVU"}],"identifier":"installation","label":"Installation","html_id":"installation","implicit":true,"key":"LjG63TAXNr"},{"type":"code","lang":"bash","value":"pip install connattractor","position":{"start":{"line":9,"column":1},"end":{"line":11,"column":1}},"key":"XYHcoJ807S"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":13,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"strong","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Part 1","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"BBOcimykJw"}],"key":"HQ4NRivEJw"},{"type":"text","value":": The quickest way to plot and analyze your data on the CHNN projection","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"OSb7VOKlG8"}],"key":"xQn6JHRuM6"},{"type":"listItem","spread":true,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"strong","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Part 2","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"NWp0F5lFZk"}],"key":"sZMi6vNV2t"},{"type":"text","value":": Build your own CHNN projection","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"TBUiY3UOUU"}],"key":"eUEvB5gnIB"}],"key":"ynbTn8tUJ6"}],"data":{"type":"notebook-content"},"key":"wciTldYqqy"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iXeBdmsYlS"}],"key":"G2ijMuP9Db"}],"key":"vcI016L17t"}],"data":{"type":"notebook-content"},"key":"HxOR47HAfA"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"import sys\nsys.path.append('..')\nimport pickle\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom connattractor import network, analysis","key":"ZqQrRJqeML"},{"type":"output","id":"QHzzn871jyidEr8EqwiUT","data":[],"key":"goNCrwCJ4k"}],"data":{"type":"notebook-code","ExecuteTime":{"end_time":"2023-08-21T16:31:16.104879Z","start_time":"2023-08-21T16:31:15.942684Z"}},"key":"YNCoNEZbYA"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Part 1: The quickest way to plot and analyze your data on the CHNN projection","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HKg0d1DKrk"}],"identifier":"part-1-the-quickest-way-to-plot-and-analyze-your-data-on-the-chnn-projection","label":"Part 1: The quickest way to plot and analyze your data on the CHNN projection","html_id":"part-1-the-quickest-way-to-plot-and-analyze-your-data-on-the-chnn-projection","implicit":true,"key":"ZRSctPsA7r"}],"data":{"type":"notebook-content"},"key":"Cijdh82evO"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"For the quickest start, you can load the pre-computed embedding, calculated on the example connectome provided with the package.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"t9f12tcdPt"}],"key":"hBBaWTQp5n"}],"data":{"type":"notebook-content"},"key":"DcPkAXNKJd"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"with open('../data_out/default_hopfield_embedding_0.37.pkl', 'rb') as file:\n    hopfield_embedding = pickle.load(file)","key":"HcpszDK6Ri"},{"type":"output","id":"H-3_wBFKV__-uGUhT6LVJ","data":[],"key":"vyiWsUQR21"}],"data":{"type":"notebook-code"},"key":"n1d96fwM2w"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Load the example task data, scrub it and seperate it into task and rest:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hcVyJj0vrh"}],"identifier":"load-the-example-task-data-scrub-it-and-seperate-it-into-task-and-rest","label":"Load the example task data, scrub it and seperate it into task and rest:","html_id":"load-the-example-task-data-scrub-it-and-seperate-it-into-task-and-rest","implicit":true,"key":"RzZVK5IHnt"}],"data":{"type":"notebook-content"},"key":"iaCX9axDDz"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"from sklearn.preprocessing import StandardScaler\n\n_fd_thr = 0.15\n_perc_scrub_thr = 0.5\n\nrest = np.repeat(np.nan, 122)\ntask = np.repeat(np.nan, 122)\ntemperatures = [np.nan]\nsub_rest = [np.nan]\nsub_task = [np.nan]\n\n_TR_ = 2.0 # seconds\n\nfor sub in range(1,33):\n    sub_pad = f'{sub+1:02}'\n    fd = pd.read_csv('../data_in/ex_timeseries_task/sub-' + sub_pad + '_FD.txt').values.flatten()\n    fd = np.hstack(([0], fd))\n    ts = pd.read_csv('../data_in/ex_timeseries_task/sub-' + sub_pad + '_ts.txt', sep='\\t').iloc[:, 1:].values\n    events = pd.read_csv('../data_in/ex_timeseries_task/sub-' + sub_pad + '_task-heatpainwithregulationandratings_run-01_events.tsv',\n                        sep='\\t')\n    \n    ts = StandardScaler().fit_transform(ts)\n\n    if np.sum(fd>_fd_thr)/len(fd) < _perc_scrub_thr:\n        ts[fd>=_fd_thr] = np.nan\n    else:\n        ts[:] = np.nan\n        print('perc. scrubbed:', np.sum(fd>_fd_thr)/len(fd))\n        \n    # task timeframes: same duration, 6 sec delay in onset due to HRF\n    # rest timeframes: starts 6 sec after last block, right until the onset of the next block\n    \n    rest_block = ts[0:(int(np.round(18+2/_TR_))), :]\n    rest = np.vstack((rest, rest_block))\n    sub_rest += [sub] * rest_block.shape[0]\n    \n    for i in events.index: \n        \n        onset = int(np.round(events.loc[i, \"onset\"]/_TR_))\n        end = onset + int(np.round(events.loc[i, \"duration\"]/_TR_))\n        \n        if not np.isnan(events.loc[i, \"temperature\"]):\n            # early phase\n            current_block = ts[(onset+int(np.round(8/_TR_))):(onset+int(np.round(16/_TR_))), :]\n            task = np.vstack((task, current_block))\n            temperatures += [events.loc[i, \"temperature\"]]*current_block.shape[0]\n            sub_task += [sub] * current_block.shape[0]\n\ntemperatures = np.array(temperatures)[~np.ma.fix_invalid(task).mask.any(axis=1)]\nsub_rest = np.array(sub_rest)[~np.ma.fix_invalid(rest).mask.any(axis=1)]\nsub_task = np.array(sub_task)[~np.ma.fix_invalid(task).mask.any(axis=1)]\ntask = task[~np.ma.fix_invalid(task).mask.any(axis=1)]\nrest = rest[~np.ma.fix_invalid(rest).mask.any(axis=1)]\nrest.shape, task.shape, np.unique(temperatures), len(sub_rest)","key":"ECOp68b9gJ"},{"type":"output","id":"2zNJnWqX5YFGa9RPcbdCk","data":[{"name":"stdout","output_type":"stream","text":"perc. scrubbed: 0.8133971291866029\nperc. scrubbed: 0.5741626794258373\nperc. scrubbed: 0.6267942583732058\nperc. scrubbed: 0.7081339712918661\n"},{"output_type":"execute_result","execution_count":6,"metadata":{},"data":{"text/plain":{"content":"((405, 122), (1052, 122), array([42.3, 43.3, 44.3, 45.3, 46. , 46.3]), 405)","content_type":"text/plain"}}}],"key":"BHbjSKWx1X"}],"data":{"type":"notebook-code"},"key":"YTn9QleDVp"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plotting data in the projection plane","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JKJSmHNXfg"}],"identifier":"plotting-data-in-the-projection-plane","label":"Plotting data in the projection plane","html_id":"plotting-data-in-the-projection-plane","implicit":true,"key":"aoUnBToMtU"}],"data":{"type":"notebook-content"},"key":"o5ALxmbJT7"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"To get a good impression on the data in the projection, we first plot a contourplot of all activations of the rest data and plot the mean activations during rest of all study participants on the projection. We repeat the same for the task data.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BP5efD6mRy"}],"key":"k0LrUJlQoZ"}],"data":{"type":"notebook-content"},"key":"O1apnr0Uaf"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"fig, ax = plt.subplots(1, 2, subplot_kw={'projection': 'polar'}, figsize=(8, 4))\n    \nhopfield_embedding.plot(rest, plot_type='contourf', ax=ax[0],\n                    density_bins=30, density_sigma=1, levels=6, alpha=0.8, cmap='Blues',\n                    attractor_plot_type='glassbrain', attractor_kwargs=dict(cmap='binary'),\n                    regimes_fill_kwargs=dict(alpha=0.0),\n                    regimes_contour_kwargs=dict(alpha=1.0, colors='black')\n                   )\n\nsub_means_rest = np.array([np.mean(rest[sub_rest==sub], axis=0) for sub in np.unique(sub_rest)])\nsub_means_task = np.array([np.mean(task[sub_task==sub], axis=0) for sub in np.unique(sub_task)])\n\nhopfield_embedding.plot(sub_means_rest, plot_type='scatter', ax=ax[0],\n                        marker='^', c='black', s=30,\n                        attractor_plot_type='scatter', attractor_kwargs=dict(alpha=0),\n                        regimes_fill_kwargs=dict(alpha=0.0),\n                        regimes_contour_kwargs=dict(alpha=1.0, colors='black')\n                       )\nax[0].set_yticks([])\nax[0].grid(False)\n\n\nhopfield_embedding.plot(task, plot_type='contourf', ax=ax[1],\n                    density_bins=30, density_sigma=1, levels=6, alpha=0.8, cmap='Reds',\n                    attractor_plot_type='glassbrain', attractor_kwargs=dict(cmap='binary'),\n                    regimes_fill_kwargs=dict(alpha=0.0),\n                    regimes_contour_kwargs=dict(alpha=1.0, colors='black')\n                   )\n\nhopfield_embedding.plot(sub_means_task, plot_type='scatter', ax=ax[1],\n                        marker='^', c='black', s=30,\n                        attractor_plot_type='scatter', attractor_kwargs=dict(alpha=0),\n                        regimes_fill_kwargs=dict(alpha=0.0),\n                        regimes_contour_kwargs=dict(alpha=1.0, colors='black')\n                       )\n\n\n    \n\nax[1].set_yticks([])\nax[1].grid(False)\nplt.show()","key":"ooJGQ7aWBX"},{"type":"output","id":"URji5INAiLPGP2XA-2PwW","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"e6fffb37e441e42c955e34164030e20b","path":"/e6fffb37e441e42c955e34164030e20b.png"},"text/plain":{"content":"<Figure size 800x400 with 20 Axes>","content_type":"text/plain"}}}],"key":"Qs2LRWtyFe"}],"data":{"type":"notebook-code"},"key":"eWSWf1a6I8"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Statistical analysis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tjbK9aZSpw"}],"identifier":"statistical-analysis","label":"Statistical analysis","html_id":"statistical-analysis","implicit":true,"key":"tMAXwwC5Cl"}],"data":{"type":"notebook-content"},"key":"ZQ1jaLop6q"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"To compare the two conditions statistically with a permutation test, compare the position difference in the projection plane as well as the absolute energy difference as test statistics. In this example we calculate 1000 permutations, swapping the conditions and plot the actual difference against the null distribution.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bc4fAn40CA"}],"key":"Rvg9vTMYem"}],"data":{"type":"notebook-content"},"key":"ffjsUk1HQu"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"from numpy.linalg import norm\nrandom = np.random.default_rng(42)\nnoise = 0.37\nnum_perm = 1000\n\n\nsub_means_rest = np.array([np.mean(rest[sub_rest==sub], axis=0) for sub in np.unique(sub_rest)])\nsub_means_task = np.array([np.mean(task[sub_task==sub], axis=0) for sub in np.unique(sub_task)])\n\ntask_embedded = hopfield_embedding.embedding_model.transform(sub_means_task)[:, :2]\nrest_embedded = hopfield_embedding.embedding_model.transform(sub_means_rest)[:, :2]\ndiffs = task_embedded - rest_embedded\ntrue_diffs_norm = np.array([norm(d) for d in diffs])\ntrue_diff_mean = np.mean(true_diffs_norm)\n\nenergy_rest = np.array([hopfield_embedding.hopnet.energy(s) for s in sub_means_rest])\nenergy_task = np.array([hopfield_embedding.hopnet.energy(s) for s in sub_means_task])\n\ntrue_energy_diff = energy_rest - energy_task\ntrue_energy_diff_mean = np.mean(true_energy_diff)\n\nn = len(diffs)\ndiffs = []\nenergy_diffs = []\n\nfor p in range(num_perm):\n    # swap conditions randomly (i.e. sign flip)\n    \n    perm_i = random.choice([1,-1], n)\n    diffs.append(np.mean(true_diffs_norm * perm_i))\n    energy_diffs.append(np.mean(true_energy_diff * perm_i))\n\n\nplt.figure(figsize=(1,1))\nplt.hist(diffs, color='gray')\nplt.axvline(true_diff_mean, color='black')\n\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['top'].set_visible(False)\nplt.show()\n\nplt.figure(figsize=(1,1))\nplt.hist(energy_diffs, color='gray')\nplt.axvline(true_energy_diff_mean, color='black')\n\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['top'].set_visible(False)\nplt.show()\n\n\nprint('p(projection) =', (diffs>true_diff_mean).sum()/num_perm)\nprint('p(energy) =', (energy_diffs>true_energy_diff_mean).sum()/num_perm)","key":"fmfMoP2DL3"},{"type":"output","id":"qvzoBX-xR5fGWgiREuEW7","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"f91e78c06010bd7c5508247298cc602f","path":"/f91e78c06010bd7c5508247298cc602f.png"},"text/plain":{"content":"<Figure size 100x100 with 1 Axes>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"73dee6c7a6cbda63c9b3d171eb4ecf0d","path":"/73dee6c7a6cbda63c9b3d171eb4ecf0d.png"},"text/plain":{"content":"<Figure size 100x100 with 1 Axes>","content_type":"text/plain"}}},{"name":"stdout","output_type":"stream","text":"p(projection) = 0.0\np(energy) = 0.0\n"}],"key":"FIM8KN4wUg"}],"data":{"type":"notebook-code"},"key":"ZwKq2G8Xiw"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Part 2: Build your own CHNN projection","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"d94ERlcwih"}],"identifier":"part-2-build-your-own-chnn-projection","label":"Part 2: Build your own CHNN projection","html_id":"part-2-build-your-own-chnn-projection","implicit":true,"key":"y501PihmCo"}],"data":{"type":"notebook-content"},"key":"trdVQCbGAt"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Obtain functional connectivity matrix","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"g5FnDTSAMf"}],"identifier":"obtain-functional-connectivity-matrix","label":"Obtain functional connectivity matrix","html_id":"obtain-functional-connectivity-matrix","implicit":true,"key":"ASlAObKSvN"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Should be a partial correlation matrix, square and symmetric.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"RszGwmtMTY"}],"key":"KSG5hipoqq"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Below, we load in an example connectome, derived from study 1 of the manuscript.\nGiven the high replicability and generalizability of CHNN analyses, the connectome does not have to stem from the analyzed dataset. Similarly to anatomical standrad templates in neuroimaging practice, the supplied example connectome can be considered a standard connectome template.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"nnXsh01Ggj"}],"key":"Szaj7isIMv"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Users are, nevertheless, encouraged to use dataset-specific connectomes.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"oHg8JcCXGg"}],"key":"fiUlX7oRCP"},{"type":"heading","depth":4,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Let's load in the example connectome","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"MmPnHLA8Y3"}],"identifier":"let-s-load-in-the-example-connectome","label":"Let's load in the example connectome","html_id":"let-s-load-in-the-example-connectome","implicit":true,"key":"gsFf6zWVSj"}],"data":{"type":"notebook-content"},"key":"c2OvMnFLEl"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"connfile = '../data_in/ex_connectome_partial_correlation.csv'\nmtx = pd.read_csv(connfile).iloc[:, 1:]\nmtx","key":"gvjwRRTCjY"},{"type":"output","id":"GlAaUMtYeNHJwYlKYf94h","data":[{"output_type":"execute_result","execution_count":2,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CER6_p</th>\n      <th>CER7ab</th>\n      <th>R_CERCR2_p</th>\n      <th>CER9_v</th>\n      <th>CER6_a</th>\n      <th>L_CERCR2_a</th>\n      <th>CER9_d</th>\n      <th>CER9_m</th>\n      <th>CER7b_m</th>\n      <th>L_CERCR2_p</th>\n      <th>...</th>\n      <th>LVISnet_vp</th>\n      <th>MVISnet_p</th>\n      <th>MVISnet_av</th>\n      <th>LVISnet_p</th>\n      <th>PVISnet_dm</th>\n      <th>PVISnet_vm</th>\n      <th>MVISnet_ad</th>\n      <th>VVISnet_l</th>\n      <th>LVISnet_DP</th>\n      <th>VVISnet_m</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.000000</td>\n      <td>0.023502</td>\n      <td>0.136701</td>\n      <td>0.008193</td>\n      <td>0.074264</td>\n      <td>0.021580</td>\n      <td>0.170827</td>\n      <td>0.028969</td>\n      <td>0.015883</td>\n      <td>0.130981</td>\n      <td>...</td>\n      <td>-0.002248</td>\n      <td>-0.008683</td>\n      <td>0.000152</td>\n      <td>0.035482</td>\n      <td>0.007705</td>\n      <td>-0.029055</td>\n      <td>0.009439</td>\n      <td>-0.001390</td>\n      <td>0.009582</td>\n      <td>0.007318</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.023502</td>\n      <td>1.000000</td>\n      <td>0.008167</td>\n      <td>0.024126</td>\n      <td>0.046648</td>\n      <td>0.050263</td>\n      <td>0.010915</td>\n      <td>0.070042</td>\n      <td>0.085829</td>\n      <td>-0.018248</td>\n      <td>...</td>\n      <td>0.033791</td>\n      <td>0.004000</td>\n      <td>0.011493</td>\n      <td>0.007582</td>\n      <td>-0.026080</td>\n      <td>0.008013</td>\n      <td>-0.009007</td>\n      <td>0.009144</td>\n      <td>0.001391</td>\n      <td>0.012831</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.136701</td>\n      <td>0.008167</td>\n      <td>1.000000</td>\n      <td>0.005056</td>\n      <td>0.062669</td>\n      <td>0.028488</td>\n      <td>0.041643</td>\n      <td>0.045169</td>\n      <td>0.112164</td>\n      <td>0.157129</td>\n      <td>...</td>\n      <td>-0.003300</td>\n      <td>0.016258</td>\n      <td>-0.011801</td>\n      <td>-0.001794</td>\n      <td>-0.000603</td>\n      <td>0.012350</td>\n      <td>-0.002757</td>\n      <td>-0.004949</td>\n      <td>-0.004858</td>\n      <td>-0.000633</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.008193</td>\n      <td>0.024126</td>\n      <td>0.005056</td>\n      <td>1.000000</td>\n      <td>-0.020494</td>\n      <td>-0.008721</td>\n      <td>-0.004522</td>\n      <td>0.203525</td>\n      <td>-0.003757</td>\n      <td>0.019182</td>\n      <td>...</td>\n      <td>0.021645</td>\n      <td>0.000472</td>\n      <td>-0.003774</td>\n      <td>0.003395</td>\n      <td>-0.032710</td>\n      <td>-0.015305</td>\n      <td>0.007360</td>\n      <td>0.004044</td>\n      <td>-0.011696</td>\n      <td>-0.001293</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.074264</td>\n      <td>0.046648</td>\n      <td>0.062669</td>\n      <td>-0.020494</td>\n      <td>1.000000</td>\n      <td>0.080293</td>\n      <td>0.024584</td>\n      <td>0.002491</td>\n      <td>-0.021720</td>\n      <td>0.042291</td>\n      <td>...</td>\n      <td>-0.020753</td>\n      <td>0.005295</td>\n      <td>-0.012844</td>\n      <td>-0.014833</td>\n      <td>0.009989</td>\n      <td>0.024167</td>\n      <td>-0.005186</td>\n      <td>-0.016061</td>\n      <td>0.010920</td>\n      <td>-0.007650</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>117</th>\n      <td>-0.029055</td>\n      <td>0.008013</td>\n      <td>0.012350</td>\n      <td>-0.015305</td>\n      <td>0.024167</td>\n      <td>-0.007512</td>\n      <td>0.045950</td>\n      <td>0.010056</td>\n      <td>-0.006412</td>\n      <td>-0.000421</td>\n      <td>...</td>\n      <td>0.011186</td>\n      <td>0.215436</td>\n      <td>-0.011083</td>\n      <td>-0.003814</td>\n      <td>0.163692</td>\n      <td>1.000000</td>\n      <td>0.013773</td>\n      <td>0.049101</td>\n      <td>-0.028493</td>\n      <td>0.115196</td>\n    </tr>\n    <tr>\n      <th>118</th>\n      <td>0.009439</td>\n      <td>-0.009007</td>\n      <td>-0.002757</td>\n      <td>0.007360</td>\n      <td>-0.005186</td>\n      <td>-0.023476</td>\n      <td>-0.004195</td>\n      <td>-0.029927</td>\n      <td>-0.023948</td>\n      <td>-0.023841</td>\n      <td>...</td>\n      <td>-0.012657</td>\n      <td>0.258308</td>\n      <td>0.091981</td>\n      <td>0.007686</td>\n      <td>-0.001867</td>\n      <td>0.013773</td>\n      <td>1.000000</td>\n      <td>-0.013407</td>\n      <td>0.017465</td>\n      <td>0.032366</td>\n    </tr>\n    <tr>\n      <th>119</th>\n      <td>-0.001390</td>\n      <td>0.009144</td>\n      <td>-0.004949</td>\n      <td>0.004044</td>\n      <td>-0.016061</td>\n      <td>0.004057</td>\n      <td>0.002311</td>\n      <td>-0.022643</td>\n      <td>0.001888</td>\n      <td>-0.007811</td>\n      <td>...</td>\n      <td>0.139682</td>\n      <td>-0.014010</td>\n      <td>0.077810</td>\n      <td>0.079338</td>\n      <td>0.055300</td>\n      <td>0.049101</td>\n      <td>-0.013407</td>\n      <td>1.000000</td>\n      <td>0.081084</td>\n      <td>0.162297</td>\n    </tr>\n    <tr>\n      <th>120</th>\n      <td>0.009582</td>\n      <td>0.001391</td>\n      <td>-0.004858</td>\n      <td>-0.011696</td>\n      <td>0.010920</td>\n      <td>0.002928</td>\n      <td>-0.001322</td>\n      <td>0.004114</td>\n      <td>-0.006720</td>\n      <td>-0.008002</td>\n      <td>...</td>\n      <td>0.066451</td>\n      <td>0.001324</td>\n      <td>-0.001214</td>\n      <td>0.115287</td>\n      <td>0.089609</td>\n      <td>-0.028493</td>\n      <td>0.017465</td>\n      <td>0.081084</td>\n      <td>1.000000</td>\n      <td>0.000165</td>\n    </tr>\n    <tr>\n      <th>121</th>\n      <td>0.007318</td>\n      <td>0.012831</td>\n      <td>-0.000633</td>\n      <td>-0.001293</td>\n      <td>-0.007650</td>\n      <td>0.026176</td>\n      <td>-0.012108</td>\n      <td>-0.008898</td>\n      <td>-0.002792</td>\n      <td>-0.002899</td>\n      <td>...</td>\n      <td>0.024625</td>\n      <td>0.088237</td>\n      <td>0.171533</td>\n      <td>0.016583</td>\n      <td>0.043844</td>\n      <td>0.115196</td>\n      <td>0.032366</td>\n      <td>0.162297</td>\n      <td>0.000165</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>122 rows × 122 columns</p>\n</div>","content_type":"text/html"},"text/plain":{"content":"       CER6_p    CER7ab  R_CERCR2_p    CER9_v    CER6_a  L_CERCR2_a    CER9_d  \\\n0    1.000000  0.023502    0.136701  0.008193  0.074264    0.021580  0.170827   \n1    0.023502  1.000000    0.008167  0.024126  0.046648    0.050263  0.010915   \n2    0.136701  0.008167    1.000000  0.005056  0.062669    0.028488  0.041643   \n3    0.008193  0.024126    0.005056  1.000000 -0.020494   -0.008721 -0.004522   \n4    0.074264  0.046648    0.062669 -0.020494  1.000000    0.080293  0.024584   \n..        ...       ...         ...       ...       ...         ...       ...   \n117 -0.029055  0.008013    0.012350 -0.015305  0.024167   -0.007512  0.045950   \n118  0.009439 -0.009007   -0.002757  0.007360 -0.005186   -0.023476 -0.004195   \n119 -0.001390  0.009144   -0.004949  0.004044 -0.016061    0.004057  0.002311   \n120  0.009582  0.001391   -0.004858 -0.011696  0.010920    0.002928 -0.001322   \n121  0.007318  0.012831   -0.000633 -0.001293 -0.007650    0.026176 -0.012108   \n\n       CER9_m   CER7b_m  L_CERCR2_p  ...  LVISnet_vp  MVISnet_p  MVISnet_av  \\\n0    0.028969  0.015883    0.130981  ...   -0.002248  -0.008683    0.000152   \n1    0.070042  0.085829   -0.018248  ...    0.033791   0.004000    0.011493   \n2    0.045169  0.112164    0.157129  ...   -0.003300   0.016258   -0.011801   \n3    0.203525 -0.003757    0.019182  ...    0.021645   0.000472   -0.003774   \n4    0.002491 -0.021720    0.042291  ...   -0.020753   0.005295   -0.012844   \n..        ...       ...         ...  ...         ...        ...         ...   \n117  0.010056 -0.006412   -0.000421  ...    0.011186   0.215436   -0.011083   \n118 -0.029927 -0.023948   -0.023841  ...   -0.012657   0.258308    0.091981   \n119 -0.022643  0.001888   -0.007811  ...    0.139682  -0.014010    0.077810   \n120  0.004114 -0.006720   -0.008002  ...    0.066451   0.001324   -0.001214   \n121 -0.008898 -0.002792   -0.002899  ...    0.024625   0.088237    0.171533   \n\n     LVISnet_p  PVISnet_dm  PVISnet_vm  MVISnet_ad  VVISnet_l  LVISnet_DP  \\\n0     0.035482    0.007705   -0.029055    0.009439  -0.001390    0.009582   \n1     0.007582   -0.026080    0.008013   -0.009007   0.009144    0.001391   \n2    -0.001794   -0.000603    0.012350   -0.002757  -0.004949   -0.004858   \n3     0.003395   -0.032710   -0.015305    0.007360   0.004044   -0.011696   \n4    -0.014833    0.009989    0.024167   -0.005186  -0.016061    0.010920   \n..         ...         ...         ...         ...        ...         ...   \n117  -0.003814    0.163692    1.000000    0.013773   0.049101   -0.028493   \n118   0.007686   -0.001867    0.013773    1.000000  -0.013407    0.017465   \n119   0.079338    0.055300    0.049101   -0.013407   1.000000    0.081084   \n120   0.115287    0.089609   -0.028493    0.017465   0.081084    1.000000   \n121   0.016583    0.043844    0.115196    0.032366   0.162297    0.000165   \n\n     VVISnet_m  \n0     0.007318  \n1     0.012831  \n2    -0.000633  \n3    -0.001293  \n4    -0.007650  \n..         ...  \n117   0.115196  \n118   0.032366  \n119   0.162297  \n120   0.000165  \n121   1.000000  \n\n[122 rows x 122 columns]","content_type":"text/plain"}}}],"key":"raLNPRH5RK"}],"data":{"type":"notebook-code","ExecuteTime":{"end_time":"2023-08-21T16:32:22.601047Z","start_time":"2023-08-21T16:32:22.546256Z"}},"key":"YJnE0qtNXT"},{"type":"block","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now we construct a CHNN and plot the weights","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ycK36W8sS3"}],"identifier":"now-we-construct-a-chnn-and-plot-the-weights","label":"Now we construct a CHNN and plot the weights","html_id":"now-we-construct-a-chnn-and-plot-the-weights","implicit":true,"key":"DfdvjAN2NO"}],"data":{"type":"notebook-content"},"key":"K2GqCeOAjF"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"hopnet = network.Hopfield(mtx)\nhopnet.plot_weights()","key":"F5JxEeO0g0"},{"type":"output","id":"s78uwB3FTZSDARZPGM4fY","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"3fc63aead9275d198a41f25d64320f9c","path":"/3fc63aead9275d198a41f25d64320f9c.png"},"text/plain":{"content":"<Figure size 600x500 with 2 Axes>","content_type":"text/plain"}}}],"key":"I3lgDt1ZF0"}],"data":{"type":"notebook-code","ExecuteTime":{"end_time":"2023-08-21T16:34:51.827031Z","start_time":"2023-08-21T16:34:51.489089Z"}},"key":"yeCc2Ag0NQ"},{"type":"block","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now we run the stochastic relaxation procedure to obtain simulated states","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FfoKWtfxvo"}],"identifier":"now-we-run-the-stochastic-relaxation-procedure-to-obtain-simulated-states","label":"Now we run the stochastic relaxation procedure to obtain simulated states","html_id":"now-we-run-the-stochastic-relaxation-procedure-to-obtain-simulated-states","implicit":true,"key":"qL1ehjimlS"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"It may take a few seconds...","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"kswMgQPp1N"}],"key":"Ka6o2d6Dal"}],"data":{"type":"notebook-content","ExecuteTime":{"end_time":"2023-08-21T16:35:32.422191Z","start_time":"2023-08-21T16:35:32.419696Z"}},"key":"ySlDmnTBFJ"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"chnn_state_space = analysis.simulate_activations(mtx.values,\n                                            noise_coef=0.37,\n                                            num_iter=100000,\n                                            beta=0.04,\n                                            random_state=42)","key":"Pfy7Gq0UWp"},{"type":"output","id":"cSy9hR-8u3qD4e5a0S6_R","data":[{"name":"stderr","output_type":"stream","text":"100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 100000/100000 [00:21<00:00, 4619.54it/s]\n"}],"key":"PAdfh5Ag3s"}],"data":{"type":"notebook-code","ExecuteTime":{"end_time":"2023-08-21T16:44:39.716101Z","start_time":"2023-08-21T16:44:22.264954Z"}},"key":"z6d1L8HxQw"},{"type":"block","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We create a Hopfield Embedding","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"oPMMiaspuL"}],"identifier":"we-create-a-hopfield-embedding","label":"We create a Hopfield Embedding","html_id":"we-create-a-hopfield-embedding","implicit":true,"key":"GZ5bZCSwia"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Again, a few seconds...","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"UpDNI342Tt"}],"key":"hkKWEcqkCT"}],"data":{"type":"notebook-content","ExecuteTime":{"end_time":"2023-08-21T16:37:38.466307Z","start_time":"2023-08-21T16:37:38.460513Z"}},"key":"fAY1yeAZeh"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"chnn_projection = analysis.create_embeddings(chnn_state_space,\n                                             attractor_sample=1000,\n                                             random_state=42)","key":"nNc4RZ8RDI"},{"type":"output","id":"bxxSaDxwX4rjNG3UvRF3J","data":[{"name":"stderr","output_type":"stream","text":"100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1000/1000 [00:59<00:00, 16.92it/s]\n"}],"key":"wR3htbaSPK"}],"data":{"type":"notebook-code","ExecuteTime":{"end_time":"2023-08-21T16:45:55.879874Z","start_time":"2023-08-21T16:45:14.184761Z"}},"key":"JvmwVa50Dg"},{"type":"block","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"and plot the state space in it","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IR6kIcifdy"}],"identifier":"and-plot-the-state-space-in-it","label":"and plot the state space in it","html_id":"and-plot-the-state-space-in-it","implicit":true,"key":"pCGGEHwfI6"}],"data":{"type":"notebook-content"},"key":"eMqpLnBcWM"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"ax = chnn_projection.plot(chnn_state_space.states, plot_type='contourf',\n                          density_bins=30, density_sigma=0.5, levels=12, alpha=0.8, cmap='Greens',\n                          attractor_plot_type='glassbrain', attractor_kwargs=dict(cmap='binary'),\n                          regimes_fill_kwargs=dict(alpha=0.0),\n                          regimes_contour_kwargs=dict(alpha=1.0, colors='black')\n                         )\nax.set_yticks([])\nax.grid(False)","key":"oNtt1cB7FI"},{"type":"output","id":"A2tfviBxn0F6CjTEAoSWl","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"802d1dd40068d39638cfbdb6f2f33935","path":"/802d1dd40068d39638cfbdb6f2f33935.png"},"text/plain":{"content":"<Figure size 480x480 with 10 Axes>","content_type":"text/plain"}}}],"key":"SRWz156aAw"}],"data":{"type":"notebook-code","ExecuteTime":{"end_time":"2023-08-21T16:48:42.956690Z","start_time":"2023-08-21T16:48:31.603657Z"}},"key":"w15My7XfBm"}],"key":"mGIXR0YNcs"},"references":{"cite":{"order":[],"data":{}}}}